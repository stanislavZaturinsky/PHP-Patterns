<?php
namespace woo\command;

abstract class Command {
    final function __construct() {}

    function execute(\woo\controller\Request $request) {
        $this->doExecute($request);
    }

    abstract function doExecute(\woo\controller\Request $request);
}
//-------------------------------- DOCUMENTATION
//Объявляя метод конструктора как final, мы делаем невозможным для дочернего
//класса его переопределение. Поэтому ни один класс Command никогда не потребует
//аргументы для своего конструктора.Помните, что вы никогда не должны использовать
//входные данные, полученные от пользователя, не проверив их. Я включил проверку,
//чтобы убедиться, что в предоставленной строке "$cmd" не находятся элементы пути. В результате будут вызваны
//только файлы из нужного каталога, а не что-то вроде ../../../tmp/DodgyCommand.php.
//Вы можете сделать код еще безопаснее, принимая только командные строки. которые
//соответствуют значениям в файле конфигурации.
//Создавая классы команд, старайтесь по возможности не допускать включения
//в них логики приложения. Как только они начнут выполнять то, что должно делать
//само приложение, они превратятся в подобие запутанного сценария транзакций, и
//тогда вскоре появится дублирование. Команды - это что-то вроде станции ретрансляции:
//они должны интерпретировать запрос, вызвать логику приложения для
//выполнения операций с какими-то объектами, а затем передать данные для отображения
//уровню представления. Как только они начнут делать что-то более сложное,
//вероятно. придет время для рефакторинга. Плюсом является то, что провести
//рефакторинг достаточно легко. Ведь не трудно найти место, где команда пытается
//сделать слишком много, и обычно очевидно, что нужно сделать для решения проблемы.
//Переместите функции вниз в класс фасада или самой предметной области.