Язык PHP поддерживает полиморфизм в том смысле, что позволяет использовать вместо экземпляров
родительского класса экземпляры подкласса. Ввод в действие требуемого метода осуществляется на
этапе прогона. Поддержка перегрузки методов, при которой ввод метода в действие осуществляется
с учетом сигнатуры метода, отсутствует. Дело в том, что в каждом классе может присутствовать
только один метод с определенным именем. Но благодаря тому, что в языке PHP применяется слабая
типизация и поддерживается переменное количество параметров, появляется возможность обойти это
ограничение.

Пример полиморфизма в PHP
abstract class Publication {
 // определяем правило, что все публикации должны печататься, т.е. иметь метод do_print()
 abstract public function do_print();
}

class News extends Publication {
 // переопределяем абстрактный метод печати
 public function do_print() {
  echo '<h4>Новость</h4>';
  //...
 }
}
class Announcement extends Publication {
 // переопределяем абстрактный метод печати
 public function do_print() {
  echo '<h4>Объявление</h4>';
  //...
 }
}
class Article extends Publication {
 // переопределяем абстрактный метод печати
 public function do_print() {
  echo '<h4>Статья</h4>';
  //...
 }
}

//Наполняем массив публикаций объектами, производными от Publication
$publications[] = new News();
$publications[] = new Announcement();
$publications[] = new Article();

foreach ($publications as $publication) {
 if ($publication instanceof Publication) { // Если мы работаем с наследниками Publication
  $publication->do_print(); // то мы можем смело выводить данные на печать
 }
 else {
  //исключение или обработка ошибки
 }
}

Главное здесь — последняя часть. Именно в ней заключается суть полиморфизма.
Мы используем один и тот же код для объектов разных классов.

------------------------------------------------------------------------------
This means abstract entities are implemented in multiple ways.

Это означает, что абстрактные объекты реализуются несколькими способами.