<?php
//Сам факт, что в ход выполнения программы могут вмешаться внешние факторы
//в виде исключений, может привести к неожиданным проблемам. Например,
//после возникновения исключения в блоке try может не выполниться код очистки
//или любые другие важные действия. Как было сказано выше, при возникновении
//исключительной ситуации в блоке try управление программы передается первому
//подходящему блоку catch. В результате может не выполниться код, в котором закрывается
//подключение к базе данных или файлу, обновляется текущая информация
//о состоянии и т. п .
//В качестве примера предположим,  что в методе Runner::init() регистрируются
//все действия приложения. При этом в системный журнал записываются факт начала
//процесса инициализации, все ошибки, возникающие при работе приложения, а
//в самом конце - факт окончания процесса инициализации. Ниже приведен типичный
//упрощенный фрагмент кода. выполняющий эти действия.

class Runner (
    static function init() {
    try {
        $fh = fopen("./log.txt", "a");
        fputs($fh, "Начало\ n");
        $conf = new Conf(dirname(__FILE__) . "/conf.broken.xml");
        print "user: " . $conf->get('user') . "\n";
        print "host: " . $conf->get('host') . "\n";
        $conf->set("pass", "newpass");
        $conf->write();
        fputs($fh, "Конец\n");
        fclose($fh);
    } catch (FileException $е) {
        fputs($fh, "Файловая ошибка \n");
    //...

//Здесь сначала открывается файл log.txt, после чего в него записываются данные,
//а затем вызывается код для конфигурирования приложения. В случае возникновения
//ошибки на данном этапе информация об этом записывается в файл журнала
//в блоке catch. Блок t r y завершается оператором записи в файл и закрытием
//этого файла. Разумеется, в случае возникновения исключительной ситуации эти
//действия выполнены не будут. При этом управление передается в соответствующий
//блок catch, и оставшаяся часть кода блока try выполнена не будет. Ниже показан
//фрагмент системного журнала при возникновении исключительной ситуации, связанной
//с файлами.

//Начало
//Файловая ошибка

//  Как видите. в журнале зафиксированы факт начала процесса инициализации
//приложения и файловая ошибка. Поскольку фрагмент кода. в котором выводится
//информация в журнал об окончании процесса инициализации, не был выполнен,
//соответственно, в файл журнала ничего записано не было.
//  На первый взгляд может показаться, что код последнего этапа записи в журнал
//нужно вынести за пределы блока try / catch. Однако такое решение нельзя назвать
//надежным. Дело в том, что при обработке исключительной ситуации в блоке catch
//может быть принято решение о возобновлении выполнения программы. При этом
//управление может быть передано в произвольное место программы, которое находится
//далеко за пределами блока try / catch. Кроме того, в блоке catch может быть
//сгенерировано повторное исключение либо вовсе завершена работа программы.
//  Поэтому, чтобы помочь программистам корректно выйти из описанной выше
//ситуации, в РНР 5.5 был введен новый оператор - finally. Если вы знакомы с языком
//Java, наверняка вы уже с ним сталкивались. Несмотря на то что блок кода саtch
//вызывается только при возникновении исключительной ситуации заданного типа,
//блок кода finally вызывается всегда, независимо от того, возникло ли исключение
//при выполнении блока try .
//  Итак, для решения описанной выше проблемы мне нужно переместить код
//последнего этапа записи в журнал и закрытия файла в блок finally.
class Runner {
    static function init() {
        $fh = fopen("./log.txt", "w");
        try {
            fputs($fh, "Начало\n");
            $conf = new Conf(dirname(__FILE__) . "/conf.broken.xml");
            print "user: " . $conf->get('user') . "\n";
            print "host: " . $conf->get('host') . "\n";
            $conf->set("pass", "newpass");
            $conf->write();
        } catch(FileException $e) {
            //Файл не существует либо недоступен для записи
            fputs($fh, "Файловая ошибка\n");
            throw $e;
        } catch(XmlException $e) {
            //Поврежденный XML-файл
            fputs($fh, "Ошибка в коде xml\n");
        } catch(ConfException $e) {
            //Некорректный формат XML-файл
            fputs($fh, "Ошибка в файле конфигурации\n");
        } catch(Exception $e) {
            //Ловушка: этот код не должен никогда вызываться
            fputs($fh, "Другая ошибка\n");
        } finally {
            fputs($fh, "Конец\n");
            fclose($fh);
        }
    }
}

//Поскольку код последней записи в журнал и вызов функции fclose() помещены
//в блок finally, они будут выполняться всегда, даже в случае возникновения исключения
//FileException и повторной его генерации в блоке catch. Ниже приведен
//фрагмент журнала при возникновении исключения FileException.

//начало
//Файловая ошибка
//Конец